use crate::metadata::MetadataAdapter;
use std::result::Result;
use ironworks::excel::Row;
use crate::error::PopulateError;
impl MetadataAdapter for BNpcParts {
    fn name() -> String {
        "BNpcParts".to_string()
    }
    fn populate(row: &Row) -> Result<Self, PopulateError> {
        let offset = 0;
        Result::Ok(BNpcParts::populate(row, offset)?)
    }
}
#[derive(Debug)]
pub struct BNpcParts {
    pub r#b_npc_base1: u16,
    pub r#part_slot1: u8,
    pub r#unknown2: bool,
    pub r#unknown3: bool,
    pub r#unknown4: bool,
    pub r#unknown5: bool,
    pub r#x1: f32,
    pub r#y1: f32,
    pub r#z1: f32,
    pub r#unknown9: i16,
    pub r#scale1: f32,
    pub r#b_npc_base2: u16,
    pub r#part_slot2: u8,
    pub r#unknown13: bool,
    pub r#unknown14: bool,
    pub r#unknown15: bool,
    pub r#unknown16: bool,
    pub r#x2: f32,
    pub r#y2: f32,
    pub r#z2: f32,
    pub r#unknown20: i16,
    pub r#scale2: f32,
    pub r#b_npc_base3: u16,
    pub r#part_slot3: u8,
    pub r#unknown24: bool,
    pub r#unknown25: bool,
    pub r#unknown26: bool,
    pub r#unknown27: bool,
    pub r#x3: f32,
    pub r#y3: f32,
    pub r#z3: f32,
    pub r#scale3: i16,
    pub r#unknown32: f32,
    pub r#b_npc_base4: u16,
    pub r#part_slot4: u8,
    pub r#unknown35: bool,
    pub r#unknown36: bool,
    pub r#unknown37: bool,
    pub r#unknown38: bool,
    pub r#x4: f32,
    pub r#y4: f32,
    pub r#z4: f32,
    pub r#unknown42: i16,
    pub r#scale4: f32,
    pub r#b_npc_base5: u16,
    pub r#part_slot5: u8,
    pub r#unknown46: bool,
    pub r#unknown47: bool,
    pub r#unknown48: bool,
    pub r#unknown49: bool,
    pub r#x5: f32,
    pub r#y5: f32,
    pub r#z5: f32,
    pub r#unknown53: i16,
    pub r#scale5: f32,
}
impl BNpcParts {
    pub fn populate(row: &Row, offset: usize) -> Result<Self, PopulateError> {
        Result::Ok(Self {
            r#b_npc_base1: row.field(0usize + offset)?.into_u16()?,
            r#part_slot1: row.field(1usize + offset)?.into_u8()?,
            r#unknown2: row.field(2usize + offset)?.into_bool()?,
            r#unknown3: row.field(3usize + offset)?.into_bool()?,
            r#unknown4: row.field(4usize + offset)?.into_bool()?,
            r#unknown5: row.field(5usize + offset)?.into_bool()?,
            r#x1: row.field(6usize + offset)?.into_f32()?,
            r#y1: row.field(7usize + offset)?.into_f32()?,
            r#z1: row.field(8usize + offset)?.into_f32()?,
            r#unknown9: row.field(9usize + offset)?.into_i16()?,
            r#scale1: row.field(10usize + offset)?.into_f32()?,
            r#b_npc_base2: row.field(11usize + offset)?.into_u16()?,
            r#part_slot2: row.field(12usize + offset)?.into_u8()?,
            r#unknown13: row.field(13usize + offset)?.into_bool()?,
            r#unknown14: row.field(14usize + offset)?.into_bool()?,
            r#unknown15: row.field(15usize + offset)?.into_bool()?,
            r#unknown16: row.field(16usize + offset)?.into_bool()?,
            r#x2: row.field(17usize + offset)?.into_f32()?,
            r#y2: row.field(18usize + offset)?.into_f32()?,
            r#z2: row.field(19usize + offset)?.into_f32()?,
            r#unknown20: row.field(20usize + offset)?.into_i16()?,
            r#scale2: row.field(21usize + offset)?.into_f32()?,
            r#b_npc_base3: row.field(22usize + offset)?.into_u16()?,
            r#part_slot3: row.field(23usize + offset)?.into_u8()?,
            r#unknown24: row.field(24usize + offset)?.into_bool()?,
            r#unknown25: row.field(25usize + offset)?.into_bool()?,
            r#unknown26: row.field(26usize + offset)?.into_bool()?,
            r#unknown27: row.field(27usize + offset)?.into_bool()?,
            r#x3: row.field(28usize + offset)?.into_f32()?,
            r#y3: row.field(29usize + offset)?.into_f32()?,
            r#z3: row.field(30usize + offset)?.into_f32()?,
            r#scale3: row.field(31usize + offset)?.into_i16()?,
            r#unknown32: row.field(32usize + offset)?.into_f32()?,
            r#b_npc_base4: row.field(33usize + offset)?.into_u16()?,
            r#part_slot4: row.field(34usize + offset)?.into_u8()?,
            r#unknown35: row.field(35usize + offset)?.into_bool()?,
            r#unknown36: row.field(36usize + offset)?.into_bool()?,
            r#unknown37: row.field(37usize + offset)?.into_bool()?,
            r#unknown38: row.field(38usize + offset)?.into_bool()?,
            r#x4: row.field(39usize + offset)?.into_f32()?,
            r#y4: row.field(40usize + offset)?.into_f32()?,
            r#z4: row.field(41usize + offset)?.into_f32()?,
            r#unknown42: row.field(42usize + offset)?.into_i16()?,
            r#scale4: row.field(43usize + offset)?.into_f32()?,
            r#b_npc_base5: row.field(44usize + offset)?.into_u16()?,
            r#part_slot5: row.field(45usize + offset)?.into_u8()?,
            r#unknown46: row.field(46usize + offset)?.into_bool()?,
            r#unknown47: row.field(47usize + offset)?.into_bool()?,
            r#unknown48: row.field(48usize + offset)?.into_bool()?,
            r#unknown49: row.field(49usize + offset)?.into_bool()?,
            r#x5: row.field(50usize + offset)?.into_f32()?,
            r#y5: row.field(51usize + offset)?.into_f32()?,
            r#z5: row.field(52usize + offset)?.into_f32()?,
            r#unknown53: row.field(53usize + offset)?.into_i16()?,
            r#scale5: row.field(54usize + offset)?.into_f32()?,
        })
    }
}
