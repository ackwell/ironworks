use crate::error::PopulateError;
use std::vec::Vec;
use crate::utility::read_array;
use ironworks::excel::Row;
use std::result::Result;
use ironworks::sestring::SeString;
use crate::metadata::MetadataAdapter;
impl MetadataAdapter for LotteryExchangeShop {
    fn name() -> String {
        "LotteryExchangeShop".to_string()
    }
    fn populate(row: &Row) -> Result<Self, PopulateError> {
        let offset = 0;
        Result::Ok(LotteryExchangeShop::populate(row, offset)?)
    }
}
#[derive(Debug)]
pub struct LotteryExchangeShop {
    pub r#unknown0: SeString,
    pub r#item_accepted: Vec<i32>,
    pub r#amount_accepted: Vec<u32>,
    pub r#unknown65: u8,
    pub r#unknown66: u8,
    pub r#unknown67: u8,
    pub r#unknown68: u8,
    pub r#unknown69: u8,
    pub r#unknown70: u8,
    pub r#unknown71: u8,
    pub r#unknown72: u8,
    pub r#unknown73: u8,
    pub r#unknown74: u8,
    pub r#unknown75: u8,
    pub r#unknown76: u8,
    pub r#unknown77: u8,
    pub r#unknown78: u8,
    pub r#unknown79: u8,
    pub r#unknown80: u8,
    pub r#unknown81: u8,
    pub r#unknown82: u8,
    pub r#unknown83: u8,
    pub r#unknown84: u8,
    pub r#unknown85: u8,
    pub r#unknown86: u8,
    pub r#unknown87: u8,
    pub r#unknown88: u8,
    pub r#unknown89: u8,
    pub r#unknown90: u8,
    pub r#unknown91: u8,
    pub r#unknown92: u8,
    pub r#unknown93: u8,
    pub r#unknown94: u8,
    pub r#unknown95: u8,
    pub r#unknown96: u8,
    pub r#unknown97: u8,
    pub r#unknown98: u8,
    pub r#unknown99: u8,
    pub r#unknown100: u8,
    pub r#unknown101: u8,
    pub r#unknown102: u8,
    pub r#unknown103: u8,
    pub r#unknown104: u8,
    pub r#unknown105: u8,
    pub r#unknown106: u8,
    pub r#unknown107: u8,
    pub r#unknown108: u8,
    pub r#unknown109: u8,
    pub r#unknown110: u8,
    pub r#unknown111: u8,
    pub r#unknown112: u8,
    pub r#unknown113: u8,
    pub r#unknown114: u8,
    pub r#unknown115: u8,
    pub r#unknown116: u8,
    pub r#unknown117: u8,
    pub r#unknown118: u8,
    pub r#unknown119: u8,
    pub r#unknown120: u8,
    pub r#unknown121: u8,
    pub r#unknown122: u8,
    pub r#unknown123: u8,
    pub r#unknown124: u8,
    pub r#unknown125: u8,
    pub r#unknown126: u8,
    pub r#unknown127: u8,
    pub r#unknown128: u8,
    pub r#lua: SeString,
    pub r#log_message: Vec<u32>,
}
impl LotteryExchangeShop {
    pub fn populate(row: &Row, offset: usize) -> Result<Self, PopulateError> {
        Result::Ok(Self {
            r#unknown0: row.field(0usize + offset)?.into_string()?,
            r#item_accepted: read_array(
                offset,
                32usize,
                1usize,
                |offset| { Result::Ok(row.field(1usize + offset)?.into_i32()?) },
            )?,
            r#amount_accepted: read_array(
                offset,
                32usize,
                1usize,
                |offset| { Result::Ok(row.field(33usize + offset)?.into_u32()?) },
            )?,
            r#unknown65: row.field(65usize + offset)?.into_u8()?,
            r#unknown66: row.field(66usize + offset)?.into_u8()?,
            r#unknown67: row.field(67usize + offset)?.into_u8()?,
            r#unknown68: row.field(68usize + offset)?.into_u8()?,
            r#unknown69: row.field(69usize + offset)?.into_u8()?,
            r#unknown70: row.field(70usize + offset)?.into_u8()?,
            r#unknown71: row.field(71usize + offset)?.into_u8()?,
            r#unknown72: row.field(72usize + offset)?.into_u8()?,
            r#unknown73: row.field(73usize + offset)?.into_u8()?,
            r#unknown74: row.field(74usize + offset)?.into_u8()?,
            r#unknown75: row.field(75usize + offset)?.into_u8()?,
            r#unknown76: row.field(76usize + offset)?.into_u8()?,
            r#unknown77: row.field(77usize + offset)?.into_u8()?,
            r#unknown78: row.field(78usize + offset)?.into_u8()?,
            r#unknown79: row.field(79usize + offset)?.into_u8()?,
            r#unknown80: row.field(80usize + offset)?.into_u8()?,
            r#unknown81: row.field(81usize + offset)?.into_u8()?,
            r#unknown82: row.field(82usize + offset)?.into_u8()?,
            r#unknown83: row.field(83usize + offset)?.into_u8()?,
            r#unknown84: row.field(84usize + offset)?.into_u8()?,
            r#unknown85: row.field(85usize + offset)?.into_u8()?,
            r#unknown86: row.field(86usize + offset)?.into_u8()?,
            r#unknown87: row.field(87usize + offset)?.into_u8()?,
            r#unknown88: row.field(88usize + offset)?.into_u8()?,
            r#unknown89: row.field(89usize + offset)?.into_u8()?,
            r#unknown90: row.field(90usize + offset)?.into_u8()?,
            r#unknown91: row.field(91usize + offset)?.into_u8()?,
            r#unknown92: row.field(92usize + offset)?.into_u8()?,
            r#unknown93: row.field(93usize + offset)?.into_u8()?,
            r#unknown94: row.field(94usize + offset)?.into_u8()?,
            r#unknown95: row.field(95usize + offset)?.into_u8()?,
            r#unknown96: row.field(96usize + offset)?.into_u8()?,
            r#unknown97: row.field(97usize + offset)?.into_u8()?,
            r#unknown98: row.field(98usize + offset)?.into_u8()?,
            r#unknown99: row.field(99usize + offset)?.into_u8()?,
            r#unknown100: row.field(100usize + offset)?.into_u8()?,
            r#unknown101: row.field(101usize + offset)?.into_u8()?,
            r#unknown102: row.field(102usize + offset)?.into_u8()?,
            r#unknown103: row.field(103usize + offset)?.into_u8()?,
            r#unknown104: row.field(104usize + offset)?.into_u8()?,
            r#unknown105: row.field(105usize + offset)?.into_u8()?,
            r#unknown106: row.field(106usize + offset)?.into_u8()?,
            r#unknown107: row.field(107usize + offset)?.into_u8()?,
            r#unknown108: row.field(108usize + offset)?.into_u8()?,
            r#unknown109: row.field(109usize + offset)?.into_u8()?,
            r#unknown110: row.field(110usize + offset)?.into_u8()?,
            r#unknown111: row.field(111usize + offset)?.into_u8()?,
            r#unknown112: row.field(112usize + offset)?.into_u8()?,
            r#unknown113: row.field(113usize + offset)?.into_u8()?,
            r#unknown114: row.field(114usize + offset)?.into_u8()?,
            r#unknown115: row.field(115usize + offset)?.into_u8()?,
            r#unknown116: row.field(116usize + offset)?.into_u8()?,
            r#unknown117: row.field(117usize + offset)?.into_u8()?,
            r#unknown118: row.field(118usize + offset)?.into_u8()?,
            r#unknown119: row.field(119usize + offset)?.into_u8()?,
            r#unknown120: row.field(120usize + offset)?.into_u8()?,
            r#unknown121: row.field(121usize + offset)?.into_u8()?,
            r#unknown122: row.field(122usize + offset)?.into_u8()?,
            r#unknown123: row.field(123usize + offset)?.into_u8()?,
            r#unknown124: row.field(124usize + offset)?.into_u8()?,
            r#unknown125: row.field(125usize + offset)?.into_u8()?,
            r#unknown126: row.field(126usize + offset)?.into_u8()?,
            r#unknown127: row.field(127usize + offset)?.into_u8()?,
            r#unknown128: row.field(128usize + offset)?.into_u8()?,
            r#lua: row.field(129usize + offset)?.into_string()?,
            r#log_message: read_array(
                offset,
                3usize,
                1usize,
                |offset| { Result::Ok(row.field(130usize + offset)?.into_u32()?) },
            )?,
        })
    }
}
