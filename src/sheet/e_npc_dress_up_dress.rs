use std::result::Result;
use crate::metadata::MetadataAdapter;
use ironworks::excel::Row;
use crate::error::PopulateError;
impl MetadataAdapter for ENpcDressUpDress {
    fn name() -> String {
        "ENpcDressUpDress".to_string()
    }
    fn populate(row: &Row) -> Result<Self, PopulateError> {
        let offset = 0;
        Result::Ok(ENpcDressUpDress::populate(row, offset)?)
    }
}
#[derive(Debug)]
pub struct ENpcDressUpDress {
    pub r#unknown0: u32,
    pub r#unknown1: bool,
    pub r#unknown2: bool,
    pub r#unknown3: bool,
    pub r#unknown4: bool,
    pub r#unknown5: bool,
    pub r#unknown6: u8,
    pub r#e_npc: u32,
    pub r#unknown8: u16,
    pub r#behavior: u16,
    pub r#unknown10: u16,
    pub r#unknown11: u8,
    pub r#unknown12: u8,
    pub r#unknown13: u8,
    pub r#unknown14: u8,
    pub r#unknown15: u8,
    pub r#unknown16: u8,
    pub r#unknown17: u8,
    pub r#unknown18: u8,
    pub r#unknown19: u8,
    pub r#unknown20: u8,
    pub r#unknown21: u8,
    pub r#unknown22: u8,
    pub r#unknown23: u8,
    pub r#unknown24: u8,
    pub r#unknown25: u8,
    pub r#unknown26: u8,
    pub r#unknown27: u8,
    pub r#unknown28: u8,
    pub r#unknown29: u8,
    pub r#unknown30: u8,
    pub r#unknown31: u8,
    pub r#unknown32: u8,
    pub r#unknown33: u8,
    pub r#unknown34: u8,
    pub r#unknown35: u8,
    pub r#unknown36: u8,
    pub r#model_main_hand: u64,
    pub r#dye_main_hand: u8,
    pub r#model_off_hand: u64,
    pub r#dye_off_hand: u8,
    pub r#model_head: u32,
    pub r#dye_head: u8,
    pub r#model_body: u32,
    pub r#dye_body: u8,
    pub r#model_hands: u32,
    pub r#dye_hands: u8,
    pub r#model_legs: u32,
    pub r#dye_legs: u8,
    pub r#model_feet: u32,
    pub r#dye_feet: u8,
}
impl ENpcDressUpDress {
    pub fn populate(row: &Row, offset: usize) -> Result<Self, PopulateError> {
        Result::Ok(Self {
            r#unknown0: row.field(0usize + offset)?.into_u32()?,
            r#unknown1: row.field(1usize + offset)?.into_bool()?,
            r#unknown2: row.field(2usize + offset)?.into_bool()?,
            r#unknown3: row.field(3usize + offset)?.into_bool()?,
            r#unknown4: row.field(4usize + offset)?.into_bool()?,
            r#unknown5: row.field(5usize + offset)?.into_bool()?,
            r#unknown6: row.field(6usize + offset)?.into_u8()?,
            r#e_npc: row.field(7usize + offset)?.into_u32()?,
            r#unknown8: row.field(8usize + offset)?.into_u16()?,
            r#behavior: row.field(9usize + offset)?.into_u16()?,
            r#unknown10: row.field(10usize + offset)?.into_u16()?,
            r#unknown11: row.field(11usize + offset)?.into_u8()?,
            r#unknown12: row.field(12usize + offset)?.into_u8()?,
            r#unknown13: row.field(13usize + offset)?.into_u8()?,
            r#unknown14: row.field(14usize + offset)?.into_u8()?,
            r#unknown15: row.field(15usize + offset)?.into_u8()?,
            r#unknown16: row.field(16usize + offset)?.into_u8()?,
            r#unknown17: row.field(17usize + offset)?.into_u8()?,
            r#unknown18: row.field(18usize + offset)?.into_u8()?,
            r#unknown19: row.field(19usize + offset)?.into_u8()?,
            r#unknown20: row.field(20usize + offset)?.into_u8()?,
            r#unknown21: row.field(21usize + offset)?.into_u8()?,
            r#unknown22: row.field(22usize + offset)?.into_u8()?,
            r#unknown23: row.field(23usize + offset)?.into_u8()?,
            r#unknown24: row.field(24usize + offset)?.into_u8()?,
            r#unknown25: row.field(25usize + offset)?.into_u8()?,
            r#unknown26: row.field(26usize + offset)?.into_u8()?,
            r#unknown27: row.field(27usize + offset)?.into_u8()?,
            r#unknown28: row.field(28usize + offset)?.into_u8()?,
            r#unknown29: row.field(29usize + offset)?.into_u8()?,
            r#unknown30: row.field(30usize + offset)?.into_u8()?,
            r#unknown31: row.field(31usize + offset)?.into_u8()?,
            r#unknown32: row.field(32usize + offset)?.into_u8()?,
            r#unknown33: row.field(33usize + offset)?.into_u8()?,
            r#unknown34: row.field(34usize + offset)?.into_u8()?,
            r#unknown35: row.field(35usize + offset)?.into_u8()?,
            r#unknown36: row.field(36usize + offset)?.into_u8()?,
            r#model_main_hand: row.field(37usize + offset)?.into_u64()?,
            r#dye_main_hand: row.field(38usize + offset)?.into_u8()?,
            r#model_off_hand: row.field(39usize + offset)?.into_u64()?,
            r#dye_off_hand: row.field(40usize + offset)?.into_u8()?,
            r#model_head: row.field(41usize + offset)?.into_u32()?,
            r#dye_head: row.field(42usize + offset)?.into_u8()?,
            r#model_body: row.field(43usize + offset)?.into_u32()?,
            r#dye_body: row.field(44usize + offset)?.into_u8()?,
            r#model_hands: row.field(45usize + offset)?.into_u32()?,
            r#dye_hands: row.field(46usize + offset)?.into_u8()?,
            r#model_legs: row.field(47usize + offset)?.into_u32()?,
            r#dye_legs: row.field(48usize + offset)?.into_u8()?,
            r#model_feet: row.field(49usize + offset)?.into_u32()?,
            r#dye_feet: row.field(50usize + offset)?.into_u8()?,
        })
    }
}
