use crate::utility::read_array;
use ironworks::excel::Row;
use std::result::Result;
use crate::error::PopulateError;
use crate::metadata::MetadataAdapter;
use std::vec::Vec;
impl MetadataAdapter for HugeCraftworksNpc {
    fn name() -> String {
        "HugeCraftworksNpc".to_string()
    }
    fn populate(row: &Row) -> Result<Self, PopulateError> {
        let offset = 0;
        Result::Ok(HugeCraftworksNpc::populate(row, offset)?)
    }
}
#[derive(Debug)]
pub struct HugeCraftworksNpc {
    pub r#e_npc_resident: u32,
    pub r#class_job_category: u16,
    pub r#unknown2: u32,
    pub r#item_requested: Vec<u32>,
    pub r#unknown7: u32,
    pub r#unknown8: u8,
    pub r#qty_requested: Vec<u8>,
    pub r#unknown13: u8,
    pub r#unknown14: bool,
    pub r#unknown15: bool,
    pub r#unknown16: bool,
    pub r#unknown17: bool,
    pub r#unknown18: bool,
    pub r#unknown19: bool,
    pub r#unknown20: u8,
    pub r#unknown21: u8,
    pub r#unknown22: u8,
    pub r#unknown23: u8,
    pub r#unknown24: u8,
    pub r#unknown25: u8,
    pub r#unknown26: u8,
    pub r#unknown27: u8,
    pub r#unknown28: u8,
    pub r#unknown29: u8,
    pub r#unknown30: u8,
    pub r#unknown31: u8,
    pub r#unknown32: u8,
    pub r#unknown33: u8,
    pub r#unknown34: u8,
    pub r#unknown35: u8,
    pub r#unknown36: u8,
    pub r#unknown37: u8,
    pub r#unknown38: u16,
    pub r#unknown39: u16,
    pub r#unknown40: u16,
    pub r#unknown41: u16,
    pub r#unknown42: u16,
    pub r#unknown43: u16,
    pub r#unknown44: u8,
    pub r#unknown45: u8,
    pub r#unknown46: u8,
    pub r#unknown47: u8,
    pub r#unknown48: u8,
    pub r#unknown49: u8,
    pub r#unknown50: u8,
    pub r#unknown51: u8,
    pub r#item_reward: Vec<u8>,
    pub r#unknown56: u32,
    pub r#unknown57: u32,
    pub r#unknown58: u32,
    pub r#unknown59: u32,
    pub r#unknown60: u32,
    pub r#unknown61: u32,
    pub r#unknown62: bool,
    pub r#unknown63: bool,
    pub r#qty_item_reward: Vec<bool>,
    pub r#unknown68: u8,
    pub r#unknown69: u8,
    pub r#item_unkown: Vec<u8>,
    pub r#unknown74: u32,
    pub r#unknown75: u32,
    pub r#unknown76: u32,
    pub r#unknown77: u32,
    pub r#unknown78: u32,
    pub r#unknown79: u32,
    pub r#unknown80: bool,
    pub r#unknown81: bool,
    pub r#qty_item_unkown: Vec<bool>,
    pub r#transient: u8,
}
impl HugeCraftworksNpc {
    pub fn populate(row: &Row, offset: usize) -> Result<Self, PopulateError> {
        Result::Ok(Self {
            r#e_npc_resident: row.field(0usize + offset)?.into_u32()?,
            r#class_job_category: row.field(1usize + offset)?.into_u16()?,
            r#unknown2: row.field(2usize + offset)?.into_u32()?,
            r#item_requested: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(3usize + offset)?.into_u32()?) },
            )?,
            r#unknown7: row.field(7usize + offset)?.into_u32()?,
            r#unknown8: row.field(8usize + offset)?.into_u8()?,
            r#qty_requested: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(9usize + offset)?.into_u8()?) },
            )?,
            r#unknown13: row.field(13usize + offset)?.into_u8()?,
            r#unknown14: row.field(14usize + offset)?.into_bool()?,
            r#unknown15: row.field(15usize + offset)?.into_bool()?,
            r#unknown16: row.field(16usize + offset)?.into_bool()?,
            r#unknown17: row.field(17usize + offset)?.into_bool()?,
            r#unknown18: row.field(18usize + offset)?.into_bool()?,
            r#unknown19: row.field(19usize + offset)?.into_bool()?,
            r#unknown20: row.field(20usize + offset)?.into_u8()?,
            r#unknown21: row.field(21usize + offset)?.into_u8()?,
            r#unknown22: row.field(22usize + offset)?.into_u8()?,
            r#unknown23: row.field(23usize + offset)?.into_u8()?,
            r#unknown24: row.field(24usize + offset)?.into_u8()?,
            r#unknown25: row.field(25usize + offset)?.into_u8()?,
            r#unknown26: row.field(26usize + offset)?.into_u8()?,
            r#unknown27: row.field(27usize + offset)?.into_u8()?,
            r#unknown28: row.field(28usize + offset)?.into_u8()?,
            r#unknown29: row.field(29usize + offset)?.into_u8()?,
            r#unknown30: row.field(30usize + offset)?.into_u8()?,
            r#unknown31: row.field(31usize + offset)?.into_u8()?,
            r#unknown32: row.field(32usize + offset)?.into_u8()?,
            r#unknown33: row.field(33usize + offset)?.into_u8()?,
            r#unknown34: row.field(34usize + offset)?.into_u8()?,
            r#unknown35: row.field(35usize + offset)?.into_u8()?,
            r#unknown36: row.field(36usize + offset)?.into_u8()?,
            r#unknown37: row.field(37usize + offset)?.into_u8()?,
            r#unknown38: row.field(38usize + offset)?.into_u16()?,
            r#unknown39: row.field(39usize + offset)?.into_u16()?,
            r#unknown40: row.field(40usize + offset)?.into_u16()?,
            r#unknown41: row.field(41usize + offset)?.into_u16()?,
            r#unknown42: row.field(42usize + offset)?.into_u16()?,
            r#unknown43: row.field(43usize + offset)?.into_u16()?,
            r#unknown44: row.field(44usize + offset)?.into_u8()?,
            r#unknown45: row.field(45usize + offset)?.into_u8()?,
            r#unknown46: row.field(46usize + offset)?.into_u8()?,
            r#unknown47: row.field(47usize + offset)?.into_u8()?,
            r#unknown48: row.field(48usize + offset)?.into_u8()?,
            r#unknown49: row.field(49usize + offset)?.into_u8()?,
            r#unknown50: row.field(50usize + offset)?.into_u8()?,
            r#unknown51: row.field(51usize + offset)?.into_u8()?,
            r#item_reward: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(52usize + offset)?.into_u8()?) },
            )?,
            r#unknown56: row.field(56usize + offset)?.into_u32()?,
            r#unknown57: row.field(57usize + offset)?.into_u32()?,
            r#unknown58: row.field(58usize + offset)?.into_u32()?,
            r#unknown59: row.field(59usize + offset)?.into_u32()?,
            r#unknown60: row.field(60usize + offset)?.into_u32()?,
            r#unknown61: row.field(61usize + offset)?.into_u32()?,
            r#unknown62: row.field(62usize + offset)?.into_bool()?,
            r#unknown63: row.field(63usize + offset)?.into_bool()?,
            r#qty_item_reward: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(64usize + offset)?.into_bool()?) },
            )?,
            r#unknown68: row.field(68usize + offset)?.into_u8()?,
            r#unknown69: row.field(69usize + offset)?.into_u8()?,
            r#item_unkown: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(70usize + offset)?.into_u8()?) },
            )?,
            r#unknown74: row.field(74usize + offset)?.into_u32()?,
            r#unknown75: row.field(75usize + offset)?.into_u32()?,
            r#unknown76: row.field(76usize + offset)?.into_u32()?,
            r#unknown77: row.field(77usize + offset)?.into_u32()?,
            r#unknown78: row.field(78usize + offset)?.into_u32()?,
            r#unknown79: row.field(79usize + offset)?.into_u32()?,
            r#unknown80: row.field(80usize + offset)?.into_bool()?,
            r#unknown81: row.field(81usize + offset)?.into_bool()?,
            r#qty_item_unkown: read_array(
                offset,
                4usize,
                1usize,
                |offset| { Result::Ok(row.field(82usize + offset)?.into_bool()?) },
            )?,
            r#transient: row.field(86usize + offset)?.into_u8()?,
        })
    }
}
